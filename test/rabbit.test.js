// Generated by CoffeeScript 2.3.1
(function() {
  var AMQP, Proxy, _, async, should, uuid;

  should = require('should');

  async = require('async');

  _ = require('underscore');

  Proxy = require('./proxy');

  uuid = require('uuid').v4;

  AMQP = require('../src/amqp');

  describe('Rabbit Plugin', function() {
    it('tests we can connect with a master node for a non-existent queue', function(done) {
      var amqp, queue;
      this.timeout(5000);
      amqp = null;
      queue = uuid();
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: ['127.0.0.1',
        'localhost'],
            rabbitMasterNode: {queue}
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.queue({queue},
        function(e,
        q) {
            return q.declare(function() {
              return q.bind("amq.direct",
        queue,
        next);
            });
          });
        },
        function(next) {
          var messageProcessor;
          messageProcessor = function() {};
          return amqp.consume(queue,
        {},
        messageProcessor,
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        }
      ], done);
    });
    it('tests we can try to connect to a with a masterNode with no api server', function(done) {
      var amqp, queue;
      amqp = null;
      queue = uuid();
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: ['idontexist.testing'],
            rabbitMasterNode: {queue}
          },
        function(e,
        r) {
            should.exist(e);
            return next();
          });
        }
      ], done);
    });
    it('tests we can not connect to the master node', function(done) {
      var amqp, queue;
      amqp = null;
      queue = "masterNodeTest2";
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: ['localhost'],
            rabbitMasterNode: {queue}
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.queue({
            queue,
            autoDelete: false
          },
        function(e,
        q) {
            return q.declare(function() {
              return q.bind("amq.direct",
        queue,
        next);
            });
          });
        },
        function(next) {
          amqp.close();
          return next();
        },
        function(next) {
          return amqp = new AMQP({
            host: ['127.0.0.1'],
            rabbitMasterNode: {queue}
          },
        function(e,
        r) {
            should.exist(e);
            return next();
          });
        }
      ], done);
    });
    return it('tests we can connect with a master node for a existing queue', function(done) {
      var amqp, queue;
      amqp = null;
      queue = "masterNodeTest";
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: ['127.0.0.1',
        'localhost'],
            rabbitMasterNode: {queue}
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.queue({
            queue,
            autoDelete: false
          },
        function(e,
        q) {
            return q.declare(function() {
              return q.bind("amq.direct",
        queue,
        next);
            });
          });
        },
        function(next) {
          amqp.close();
          return next();
        },
        function(next) {
          return amqp = new AMQP({
            host: ['127.0.0.1',
        'localhost'],
            rabbitMasterNode: {queue}
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          var messageProcessor;
          messageProcessor = function() {};
          return amqp.consume(queue,
        {},
        messageProcessor,
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.connectionOptions.host.should.eql('localhost');
          return next();
        }
      ], done);
    });
  });

}).call(this);
