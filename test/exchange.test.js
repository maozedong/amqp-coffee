// Generated by CoffeeScript 2.3.1
(function() {
  var AMQP, _, async, proxy, should, uuid;

  should = require('should');

  async = require('async');

  _ = require('underscore');

  proxy = require('./proxy');

  uuid = require('uuid').v4;

  AMQP = require('../src/amqp');

  describe('Exchange', function() {
    it('test it can declare a exchange', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "testsing"
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can declare a exchange using name', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            name: "testsing"
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can declare a exchange with no options', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            name: "testsing"
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare(function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can declare a exchange with no callback', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            name: "nocallbacktesting"
          }).declare(function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can fail declaring an exchange', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            idontbelong: "testsing"
          },
        function(e,
        exc) {
            should.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can delete a exchange', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "testsing"
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return exchange.delete({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can declare a exchange exchange binding 5541', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "exchone",
            autoDelete: false
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "exchtwo",
            autoDelete: false
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return exchange.bind("exchone",
        "ee-routingkey",
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return exchange.unbind("exchone",
        "ee-routingkey",
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "exchone"
          }).delete(next);
        },
        function(next) {
          return amqp.exchange({
            exchange: "exchtwo"
          }).delete(next);
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can declare a exchange exchange binding chained 5542', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "exchone",
            autoDelete: false
          }).declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return exchange = amqp.exchange({
            exchange: "exchtwo",
            autoDelete: false
          }).declare().bind("exchone",
        "ee-routingkey",
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return exchange.unbind("exchone",
        "ee-routingkey",
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "exchone"
          }).delete(next);
        },
        function(next) {
          return amqp.exchange({
            exchange: "exchtwo"
          }).delete(next);
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('test it can delete a exchange with no options', function(done) {
      var amqp, exchange;
      this.timeout(5000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "testsing"
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return exchange.delete(function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    return it('test we can timeout a exchange channel and reopen it', function(done) {
      var amqp, exchange;
      this.timeout(2000);
      amqp = null;
      exchange = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.exchange({
            exchange: "testsing"
          },
        function(e,
        exc) {
            should.not.exist(e);
            should.exist(exc);
            exchange = exc;
            return next();
          });
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          _.keys(amqp.channels).length.should.eql(2);
          return _.delay(next,
        500);
        },
        function(next) {
          _.keys(amqp.channels).length.should.eql(1);
          return next();
        },
        function(next) {
          return exchange.declare({},
        function(e,
        r) {
            should.not.exist(e);
            _.keys(amqp.channels).length.should.eql(2);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
  });

}).call(this);
