// Generated by CoffeeScript 2.3.1
(function() {
  var AMQP, Proxy, _, async, should;

  should = require('should');

  async = require('async');

  _ = require('underscore');

  Proxy = require('./proxy');

  AMQP = require('../src/amqp');

  describe('Connection Heartbeats', function() {
    it('we can get a heartbeat 541', function(done) {
      var amqp;
      this.timeout(5000);
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            port: 5672,
            heartbeat: 1000
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          return amqp.parser.once('heartbeat',
        function() {
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('we reset the heartbeat timer while the connection is doing other things', function(done) {
      var amqp, stage;
      this.timeout(60000);
      amqp = null;
      stage = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            port: 5672,
            heartbeat: 1000
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          var doThings,
        heartbeat,
        queuename;
          queuename = "queuename";
          heartbeat = false;
          stage = 2;
          amqp.on('close',
        function() {
            if (stage === 2) {
              throw new Error("connection closed");
            }
          });
          doThings = function() {
            return amqp.queue({
              queue: queuename
            },
        function(e,
        q) {
              should.not.exist(e);
              should.exist(q);
              return q.declare({
                passive: false
              },
        function(e,
        r) {
                should.not.exist(e);
                if (!heartbeat) {
                  return doThings();
                }
              });
            });
          };
          doThings();
          return _.delay(next,
        3000);
        },
        function(next) {
          stage = 3;
          amqp.close();
          return next();
        }
      ], done);
    });
    it('we disconnect and we dont reconnect because of the heartbeat 540', function(done) {
      var amqp;
      this.timeout(60000);
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            port: 5672,
            heartbeat: 1000
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return _.delay(next,
        3000);
        },
        function(next) {
          amqp.state.should.eql('destroyed');
          amqp.close();
          return next();
        }
      ], done);
    });
    it('hearthbeat missing reconnects 574', function(done) {
      var amqp, proxy;
      this.timeout(60000);
      proxy = new Proxy.route(7070, 5672, "localhost");
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            port: 7070
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          _.delay(function() {
            return amqp._missedHeartbeat();
          },
        100);
          return amqp.once('close',
        next);
        },
        function(next) {
          return amqp.once('ready',
        next);
        },
        function(next) {
          amqp.close();
          proxy.close();
          return next();
        }
      ], done);
    });
    return it('we send heartbeats 575', function(done) {
      var amqp, consumer, queueName;
      this.timeout(7000);
      amqp = null;
      consumer = null;
      queueName = null;
      return async.series([
        function(next) {
          amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            return should.not.exist(e);
          });
          return amqp.once('ready',
        next);
        },
        function(next) {
          consumer = new AMQP({
            host: 'localhost',
            heartbeat: 1000
          },
        function(e,
        r) {
            return should.not.exist(e);
          });
          return consumer.once('ready',
        next);
        },
        function(next) {
          return amqp.queue({
            queue: ''
          },
        function(err,
        queueInfo) {
            should.not.exist(err);
            return queueInfo.declare(function(err,
        queueInfo) {
              should.not.exist(err);
              queueName = queueInfo.queue;
              return next();
            });
          });
        },
        function(next) {
          var shouldStop;
          consumer.consume(queueName,
        {},
        function() {});
          shouldStop = false;
          setTimeout(function() {
            return shouldStop = true;
          },
        4000);
          return async.until(function() {
            return shouldStop;
          },
        function(done) {
            return amqp.publish('',
        queueName,
        'message',
        done);
          },
        next);
        },
        function(next) {
          amqp.close();
          consumer.close();
          return next();
        }
      ], done);
    });
  });

}).call(this);
