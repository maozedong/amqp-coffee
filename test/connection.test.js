// Generated by CoffeeScript 2.3.1
(function() {
  var AMQP, Proxy, _, async, should;

  should = require('should');

  async = require('async');

  _ = require('underscore');

  Proxy = require('./proxy');

  AMQP = require('../src/amqp');

  describe('Connection', function() {
    it('tests it can connect to localhost', function(done) {
      var amqp;
      return amqp = new AMQP({
        host: 'localhost'
      }, function(e, r) {
        should.not.exist(e);
        return done();
      });
    });
    it('tests it can connect to nested hosts array', function(done) {
      var amqp;
      return amqp = new AMQP({
        host: [['localhost']]
      }, function(e, r) {
        should.not.exist(e);
        return done();
      });
    });
    it('we fail connecting to an invalid host', function(done) {
      var amqp;
      return amqp = new AMQP({
        reconnect: false,
        host: 'iamnotthequeueyourlookingfor'
      }, function(e, r) {
        should.exist(e);
        amqp.close();
        return done();
      });
    });
    it('we fail connecting to an invalid no callback', function(done) {
      var amqp;
      amqp = new AMQP({
        reconnect: false,
        host: 'iamnotthequeueyourlookingfor'
      });
      return amqp.on('error', function() {
        return done();
      });
    });
    it('we can reconnect if the connection fails 532', function(done) {
      var amqp, proxy;
      proxy = new Proxy.route(7001, 5672, "localhost");
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            port: 7001
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          proxy.interrupt();
          return next();
        },
        function(next) {
          return amqp.queue({
            queue: "test"
          },
        function(e,
        q) {
            should.not.exist(e);
            should.exist(q);
            return next();
          });
        }
      ], done);
    });
    it('we disconnect', function(done) {
      var amqp;
      // proxy = new proxy.route(9001, 5672, "localhost")
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost'
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        },
        function(next) {
          return setTimeout(next,
        100);
        },
        function(next) {
          amqp.state.should.eql('destroyed');
          return next();
        }
      ], done);
    });
    it('we can connect to an array of hosts', function(done) {
      var amqp;
      // proxy = new proxy.route(9001, 5672, "localhost")
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: ['localhost',
        '127.0.0.1']
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        }
      ], done);
    });
    it('we emit only one close event', function(done) {
      var amqp, closes, proxy;
      proxy = new Proxy.route(9010, 5672, "localhost");
      amqp = null;
      closes = 0;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: ['localhost',
        '127.0.0.1'],
            port: 9010
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.on('close',
        function() {
            closes++;
            amqp.close();
            return _.delay(function() {
              closes.should.eql(1);
              amqp.close();
              return done();
            },
        300);
          });
          proxy.close();
          return next();
        }
      ], function(e, r) {
        return should.not.exist(e);
      });
    });
    it('we can reconnect to an array of hosts if the connection fails', function(done) {
      var amqp, proxy;
      this.timeout(5000);
      proxy = new Proxy.route(9009, 5672, "localhost");
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: ['localhost',
        '127.0.0.1'],
            port: 9009
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          proxy.interrupt();
          return next();
        },
        function(next) {
          return amqp.queue({
            queue: "test"
          },
        function(e,
        q) {
            should.not.exist(e);
            should.exist(q);
            return next();
          });
        },
        function(next) {
          amqp.close();
          proxy.close();
          return next();
        }
      ], done);
    });
    it('we can connect to an array of hosts randomly', function(done) {
      var amqp;
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            hostRandom: true,
            host: ['localhost',
        '127.0.0.1']
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        }
      ], done);
    });
    return it('we can timeout connecting to a host', function(done) {
      var amqp;
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            reconnect: false,
            connectTimeout: 100,
            host: 'test.com'
          },
        function(e,
        r) {
            should.exist(e);
            return next();
          });
        }
      ], done);
    });
  });

}).call(this);
