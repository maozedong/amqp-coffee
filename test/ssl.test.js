// Generated by CoffeeScript 2.3.1
(function() {
  var AMQP, Proxy, SslProxy, _, async, should;

  should = require('should');

  async = require('async');

  _ = require('underscore');

  SslProxy = require('./sslproxy');

  Proxy = require('./proxy');

  AMQP = require('../src/amqp');

  describe('SSL Connection', function() {
    var sslProxyConnection;
    sslProxyConnection = null;
    before(function(done) {
      sslProxyConnection = new SslProxy.route();
      return done();
    });
    it('tests it can connect to localhost using ssl', function(done) {
      var amqp;
      return amqp = new AMQP({
        host: 'localhost',
        ssl: true,
        sslOptions: {
          secureProtocol: "TLSv1_method",
          ca: [require('fs').readFileSync('./test/ssl/testca/cacert.pem')]
        }
      }, function(e, r) {
        should.not.exist(e);
        return done();
      });
    });
    it('we can reconnect if the connection fails ssl', function(done) {
      var amqp, proxy;
      proxy = new Proxy.route(7051, 5671, "localhost");
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            sslPort: 7051,
            ssl: true,
            sslOptions: {
              secureProtocol: "TLSv1_method",
              ca: [require('fs').readFileSync('./test/ssl/testca/cacert.pem')]
            }
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          proxy.interrupt();
          return next();
        },
        function(next) {
          return amqp.queue({
            queue: "test"
          },
        function(e,
        q) {
            should.not.exist(e);
            should.exist(q);
            return next();
          });
        }
      ], function() {
        amqp.close();
        proxy.close();
        return done();
      });
    });
    it('we emit only one close event ssl', function(done) {
      var amqp, closes, proxy;
      proxy = new Proxy.route(9010, 5671, "localhost");
      amqp = null;
      closes = 0;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            sslPort: 9010,
            ssl: true,
            sslOptions: {
              secureProtocol: "TLSv1_method",
              ca: [require('fs').readFileSync('./test/ssl/testca/cacert.pem')]
            }
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.on('close',
        function() {
            closes++;
            amqp.close();
            return _.delay(function() {
              closes.should.eql(1);
              amqp.close();
              return done();
            },
        300);
          });
          proxy.close();
          return next();
        }
      ], function(e, r) {
        return should.not.exist(e);
      });
    });
    return it('we disconnect ssl', function(done) {
      var amqp;
      amqp = null;
      return async.series([
        function(next) {
          return amqp = new AMQP({
            host: 'localhost',
            ssl: true,
            sslOptions: {
              secureProtocol: "TLSv1_method",
              ca: [require('fs').readFileSync('./test/ssl/testca/cacert.pem')]
            }
          },
        function(e,
        r) {
            should.not.exist(e);
            return next();
          });
        },
        function(next) {
          amqp.close();
          return next();
        },
        function(next) {
          return setTimeout(next,
        100);
        },
        function(next) {
          amqp.state.should.eql('destroyed');
          return next();
        }
      ], done);
    });
  });

}).call(this);
